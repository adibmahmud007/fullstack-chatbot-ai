from groq import Groq
from core.config import settings
from typing import Optional, AsyncGenerator, List, Dict
import json
from datetime import datetime

class GroqService:
    def __init__(self):
        """
        Initialize Groq client for Bangladesh Legal AI Assistant
        """
        if not settings.groq_api_key:
            raise ValueError("GROQ_API_KEY not found in environment variables")
        
        self.client = Groq(api_key=settings.groq_api_key)
        self.model = "llama3-8b-8192"
        
        # Bangladesh Legal AI Assistant System Prompt
        self.system_prompt = """You are a Bangladesh Legal Information Assistant (ржмрж╛ржВрж▓рж╛ржжрзЗрж╢ ржЖржЗржирж┐ рждржерзНржп рж╕рж╣рж╛ржпрж╝ржХ).

Your expertise covers:
ЁЯПЫя╕П **Bangladesh Legal System:**
- Constitution of Bangladesh
- Civil laws, Criminal laws, Family laws
- Labor laws, Property laws, Business laws
- Consumer rights, Digital laws
- Court procedures and legal processes

ЁЯОп **Your Role:**
- Explain Bangladesh laws in simple language (Bengali/English)
- Provide step-by-step legal guidance
- Suggest proper legal procedures and documentation
- Help understand rights and responsibilities
- Guide on when and how to seek legal help

ЁЯУЛ **Response Format:**
1. **ржЖржЗржирж┐ ржмрж┐рж╢рзНрж▓рзЗрж╖ржг (Legal Analysis):** Explain the legal situation
2. **ржЖржкржирж╛рж░ ржЕржзрж┐ржХрж╛рж░ (Your Rights):** What rights the person has
3. **ржкрж░ржмрж░рзНрждрзА ржкржжржХрзНрж╖рзЗржк (Next Steps):** Actionable steps to take
4. **ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржХрж╛ржЧржЬржкрждрзНрж░ (Required Documents):** What documents needed
5. **ржХрзЛржерж╛ржпрж╝ ржпрзЗрждрзЗ рж╣ржмрзЗ (Where to Go):** Relevant offices/courts
6. **ржЖржирзБржорж╛ржирж┐ржХ ржЦрж░ржЪ (Estimated Cost):** If applicable
7. **рж╕рждрж░рзНржХрждрж╛ (Warnings):** Important legal considerations

ЁЯЪи **Important Guidelines:**
- Always mention this is general legal information
- Emphasize consulting qualified lawyers for specific cases
- Provide both Bengali and English explanations when helpful
- Focus on Bangladesh laws and procedures
- Be supportive and clear in explanations

Remember: ржЖржЗржирж┐ ржкрж░рж╛ржорж░рзНрж╢ ржирзЗржУржпрж╝рж╛рж░ ржЬржирзНржп ржЕржнрж┐ржЬрзНржЮ ржЖржЗржиржЬрзАржмрзАрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред"""

    async def generate_legal_advice(self, legal_problem: str, max_tokens: int = 1200) -> dict:
        """
        Generate Bangladesh-specific legal advice
        """
        try:
            chat_completion = self.client.chat.completions.create(
                messages=[
                    {
                        "role": "system",
                        "content": self.system_prompt
                    },
                    {
                        "role": "user",
                        "content": f"ржЖржЗржирж┐ рж╕ржорж╕рзНржпрж╛/Legal Problem: {legal_problem}"
                    }
                ],
                model=self.model,
                max_tokens=max_tokens,
                temperature=0.2,  # Very low temperature for consistent legal info
                stream=False
            )
            
            ai_response = chat_completion.choices[0].message.content
            
            # Add legal disclaimer in Bengali and English
            legal_disclaimer = """

тЪЦя╕П **ржЖржЗржирж┐ ржжрж╛ржмрж┐рждрзНржпрж╛ржЧ / Legal Disclaimer:**
ржПржЗ рждржерзНржп рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕рж╛ржзрж╛рж░ржг ржЖржЗржирж┐ рж╢рж┐ржХрзНрж╖рж╛рж░ ржЙржжрзНржжрзЗрж╢рзНржпрзЗ ржкрзНрж░ржжрж╛ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред ржПржЯрж┐ ржХрзЛржирзЛ ржЖржЗржирж┐ ржкрж░рж╛ржорж░рзНрж╢ ржиржпрж╝ред ржЖржкржирж╛рж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ рж╕ржорж╕рзНржпрж╛рж░ ржЬржирзНржп ржЕржмрж╢рзНржпржЗ ржПржХржЬржи ржпрзЛржЧрзНржп ржЖржЗржиржЬрзАржмрзАрж░ рж╕рж╛ржерзЗ ржкрж░рж╛ржорж░рзНрж╢ ржХрж░рзБржиред

This information is provided for general legal education purposes only and does not constitute legal advice. Please consult with a qualified lawyer for your specific legal matters."""
            
            return {
                "response": ai_response + legal_disclaimer,
                "model": self.model,
                "tokens_used": chat_completion.usage.total_tokens,
                "specialization": "bangladesh_legal",
                "timestamp": datetime.now().isoformat(),
                "status": "success"
            }
            
        except Exception as e:
            return {
                "response": "ржжрзБржГржЦрж┐ржд, ржЖржЗржирж┐ рждржерзНржп ржкрзНрж░ржжрж╛ржирзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржЕржержмрж╛ рж╕рж░рж╛рж╕рж░рж┐ ржЖржЗржиржЬрзАржмрзАрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред",
                "error": str(e),
                "status": "error"
            }
    
    async def get_legal_procedures(self, case_type: str) -> dict:
        """
        Get step-by-step legal procedures for specific case types
        """
        procedure_prompt = f"ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗ '{case_type}' ржПрж░ ржЬржирзНржп ржзрж╛ржкрзЗ ржзрж╛ржкрзЗ ржЖржЗржирж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛ ржмрж░рзНржгржирж╛ ржХрж░рзБржиред ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржХрж╛ржЧржЬржкрждрзНрж░, ржЦрж░ржЪ, ржПржмржВ рж╕ржоржпрж╝рж╕рзАржорж╛ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзБржиред"
        
        try:
            response = await self.generate_legal_advice(procedure_prompt, max_tokens=1000)
            return {
                "procedure": response["response"],
                "case_type": case_type,
                "status": "success"
            }
        except Exception as e:
            return {
                "procedure": "ржЖржЗржирж┐ ржкрзНрж░ржХрзНрж░рж┐ржпрж╝рж╛рж░ рждржерзНржп ржкрзЗрждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗред ржЖржЗржиржЬрзАржмрзАрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред",
                "status": "error",
                "error": str(e)
            }
    
    async def explain_bangladesh_law(self, law_topic: str) -> dict:
        """
        Explain specific Bangladesh laws in simple language
        """
        law_prompt = f"ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ '{law_topic}' ржЖржЗржи рж╕ржорзНржкрж░рзНржХрзЗ рж╕рж╣ржЬ ржнрж╛рж╖рж╛ржпрж╝ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рзБржиред рж╕рж╛ржзрж╛рж░ржг ржорж╛ржирзБрж╖ ржХрж┐ржнрж╛ржмрзЗ ржПржЗ ржЖржЗржи ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи рждрж╛ ржмрж▓рзБржиред"
        
        return await self.generate_legal_advice(law_prompt, max_tokens=800)
    
    async def get_legal_rights(self, situation: str) -> dict:
        """
        Explain legal rights in specific situations
        """
        rights_prompt = f"'{situation}' ржкрж░рж┐рж╕рзНржерж┐рждрж┐рждрзЗ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗрж░ ржЖржЗржи ржЕржирзБржпрж╛ржпрж╝рзА ржПржХржЬржи ржмрзНржпржХрзНрждрж┐рж░ ржХрж┐ ржХрж┐ ржЕржзрж┐ржХрж╛рж░ рж░ржпрж╝рзЗржЫрзЗ? ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржмрж▓рзБржиред"
        
        return await self.generate_legal_advice(rights_prompt, max_tokens=800)
    
    async def get_document_requirements(self, legal_action: str) -> dict:
        """
        Get required documents for specific legal actions
        """
        doc_prompt = f"ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рзЗ '{legal_action}' ржПрж░ ржЬржирзНржп ржХрж┐ ржХрж┐ ржХрж╛ржЧржЬржкрждрзНрж░ ржПржмржВ ржкрзНрж░ржорж╛ржг ржкрзНрж░ржпрж╝рзЛржЬржи? ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждрж╛рж▓рж┐ржХрж╛ ржжрж┐ржиред"
        
        return await self.generate_legal_advice(doc_prompt, max_tokens=600)
    
    async def get_legal_contact_info(self, location: str = "ржврж╛ржХрж╛") -> dict:
        """
        Provide legal help contact information
        """
        contact_info = {
            "bar_associations": {
                "dhaka": "ржврж╛ржХрж╛ ржмрж╛рж░ ржЕрзНржпрж╛рж╕рзЛрж╕рж┐ржпрж╝рзЗрж╢ржи: рзжрзи-рзпрзлрзмрзирзмрзорзз",
                "chittagong": "ржЪржЯрзНржЯржЧрзНрж░рж╛ржо ржмрж╛рж░ ржЕрзНржпрж╛рж╕рзЛрж╕рж┐ржпрж╝рзЗрж╢ржи: рзжрзйрзз-рзирзорзлрзирзйрзкрзз",
                "sylhet": "рж╕рж┐рж▓рзЗржЯ ржмрж╛рж░ ржЕрзНржпрж╛рж╕рзЛрж╕рж┐ржпрж╝рзЗрж╢ржи: рзжрзорзирзз-рзнрззрзмрзирзйрзк"
            },
            "legal_aid": {
                "national": "ржЬрж╛рждрзАржпрж╝ ржЖржЗржирж┐ рж╕рж╣рж╛ржпрж╝рждрж╛ ржкрзНрж░ржжрж╛ржи рж╕ржВрж╕рзНржерж╛: рззрзмрззрзжрзй",
                "blast": "BLAST (ржЖржЗржирж┐ рж╕рж╣рж╛ржпрж╝рждрж╛): рзжрзи-рзпрзорзорзирзирзорзп"
            },
            "emergency": {
                "police": "ржкрзБрж▓рж┐рж╢: рзпрзпрзп",
                "women_helpline": "ржорж╣рж┐рж▓рж╛ рж╣рзЗрж▓рзНржкрж▓рж╛ржЗржи: рззрзжрзпрзирзз"
            }
        }
        
        return {
            "contact_info": contact_info,
            "message": f"{location} ржПрж▓рж╛ржХрж╛рж░ ржЖржЗржирж┐ рж╕рж╣рж╛ржпрж╝рждрж╛рж░ ржЬржирзНржп ржПржЗ ржиржорзНржмрж░ржЧрзБрж▓рзЛрждрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред",
            "status": "success"
        }

# Global service instance
groq_service = GroqService()